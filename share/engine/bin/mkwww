#!/usr/bin/python3
"""
Minimalist engine for building a minimalist static website.

Examples
========

::

  $ mkwww             # Run tests, first building all targets.
  $ mkwww recheck     # Run tests again, even if no source files changed.
  $ mkwww -t clean    # Clean all targets.
  $ mkwww wipe        # Thoroughly clean build directories.
  $ mkwww all         # Build all targets only, don't run tests.
  $ mkwww wipe check  # Wipe, build, then run tests.

Tests include a link checker to ensure no broken links, in both your website
source and the links generated by mkww.

Usage
=====

Control the source/build directories via envvars::

  THEME = "default" # theme directory, relative to themes directory
  SRC   = "src"     # source input directory
  GEN   = "build"   # intermediate build directory
  DST   = "dist"    # final output for publishing

Fine-grained command control::

  Usage: mkwww [<wipe|noregen|noninja>] <ninja args>

Normal operation is to scan ``SRC``, generate ``GEN/build.ninja``, then run it.
You can change this by passing a special commands as the *first* argument:

``wipe``:
  Wipe ``GEN`` and ``DST`` before everything else. If there are no further
  arguments, don't do anything else i.e. generate build.ninja or run ninja.

  To help common publishing use-cases, the top-level ``DST`` directory is kept,
  as well as certain special files, e.g. ``.git`` or ``.nojekyll``.

``noregen``:
  Don't (re)generate build.ninja before running ninja.

``noninja``:
  Don't run ninja after (re)generating build.ninja.

Convenience targets in build.ninja:

``all``:
  Build all targets

``check``:
  Run tests

``recheck``:
  Run tests unconditionally
"""

import json
import os
import subprocess
import sys

env = os.getenv
## variable dirs
THEME = env("THEME", "default")
SRC = env("SRC", "src")
GEN = env("GEN", "build")
DST = env("DST", "dist")

rel = os.path.relpath
cwd = os.getcwd()
rp = os.path.realpath
ps = os.path.split
pj = os.path.join

TRUE = ("1", "yes", "on", "true")
FALSE = ("0", "no", "off", "false")

def read_site(ENG, SRC):
  with open("%s/site.json" % ENG) as fp:
    e = json.load(fp)
  with open("%s/site.json" % SRC) as fp:
    s = json.load(fp)
  t = e | s
  return (t["dir_common"], t["dir_include"], e.get("dir_nodst",[]) + s.get("dir_nodst",[]))

def list_files(base):
  for p, _, ff in os.walk(base):
    for f in ff:
      yield pj(p, f)

def intersect(l0, l1):
  return sorted(frozenset(l0) & frozenset(l1))

def filterout(l0, l1):
  return sorted(frozenset(l1) - frozenset(l0))

def mk_config():
  global THEME, SRC, GEN, DST

  ## static dirs, relevant to the mkwww installation
  BIN_ABS = os.path.dirname(rp(__file__)).removesuffix("/")
  BIN = rel(BIN_ABS, cwd)
  ENG_ABS = rp(pj(BIN, ".."))
  ENG = rel(ENG_ABS, cwd)
  THM_ABS = rp(pj(ENG, "../themes", THEME))
  THM = rel(THM_ABS, cwd)

  os.environ["MKWWW_BIN"] = BIN_ABS
  MKWWW_NINJA_HEADER = """# THIS FILE IS AUTOMATICALLY GENERATED. ANY EDITS WILL BE OVERWRITTEN.
#
# This file expects to be run via mkwww.
# You can run it directly via ninja but you may have to set the following envvars:
""".rstrip().split("\n")
  MKWWW_NINJA_HEADER += ["# MKWWW_BIN=%s" % BIN_ABS]
  try:
    import mkwww
    del mkwww
  except ImportError:
    PYTHONPATH = "%s/../../lib/python3:%s" % (ENG_ABS, env("PYTHONPATH", ""))
    os.environ["PYTHONPATH"] = PYTHONPATH
    MKWWW_NINJA_HEADER += ["# PYTHONPATH=%s" % PYTHONPATH]

  DIR_COMMON, DIR_INCLUDE, DIR_NODST = read_site(ENG, SRC)

  ENGSRC = pj(ENG, "common")
  ENGDST = pj(DST, DIR_COMMON, "engine")
  THMSRC = pj(THM, "common")
  THMDST = pj(DST, DIR_COMMON, "theme")

  SRC_ALL = sorted(filter(lambda x: not any(x.startswith(pj(SRC, p)) for p in [DIR_INCLUDE] + DIR_NODST), list_files(SRC)))

  # supported formats, extension in upper case.
  # to add another format, implement ${BIN}/${fmt}2main then add it to this list
  SRC_FORMATS = "MD RST ADOC".split()

  SRC_D = {}
  IOV_D = {}
  SRC_OV_D = {}
  SRC_NV_D = {}
  INF_OV_D = {}
  INF_NV_D = {}
  INF_D = {}
  DEP_D = {}
  DST_D = {}
  IOV_ALL = []
  INF_OV_ALL = []
  INF_NV_ALL = []
  INF_ALL = []
  SRC_NONCOPY = []
  DEP_NONCOPY = []
  DST_NONCOPY = []

  gen_INF = lambda x: pj(GEN, rel(x, SRC)+".json")
  gen_DEP = lambda x: pj(GEN, rel(x, SRC)+".d")
  dst_SRC = lambda x: pj(DST, rel(x, SRC))
  dst_ENG = lambda x: pj(ENGDST, rel(x, ENGSRC))
  dst_THM = lambda x: pj(THMDST, rel(x, THMSRC))
  re_suf = lambda a, x, y: a.removesuffix(x)+y

  def def_fmt_vars(FMT, ext, isuf, osuf):
    SRC_D[FMT] = list(filter(lambda x: x.endswith("."+ext), SRC_ALL))
    IOV_D[FMT] = list(filter(lambda x: x.endswith("."+ext+".json"), SRC_ALL))
    SRC_OV_D[FMT] = [x.removesuffix(".json") for x in intersect([x+".json" for x in SRC_D[FMT]], IOV_D[FMT])]
    SRC_NV_D[FMT] = filterout(SRC_OV_D[FMT], SRC_D[FMT])
    INF_OV_D[FMT] = list(map(gen_INF, SRC_OV_D[FMT]))
    INF_NV_D[FMT] = list(map(gen_INF, SRC_NV_D[FMT]))
    INF_D[FMT] = list(map(gen_INF, SRC_D[FMT]))
    DEP_D[FMT] = list(map(lambda x: gen_DEP(re_suf(x, isuf, osuf)), SRC_D[FMT]))
    DST_D[FMT] = list(map(lambda x: dst_SRC(re_suf(x, isuf, osuf)), SRC_D[FMT]))

    # filter out our special handling of .html.j2
    if "."+ext == isuf:
      IOV_ALL.extend(IOV_D[FMT])
      INF_OV_ALL.extend(INF_OV_D[FMT])
      INF_NV_ALL.extend(INF_NV_D[FMT])
      INF_ALL.extend(INF_D[FMT])
      SRC_NONCOPY.extend(SRC_D[FMT])
      DEP_NONCOPY.extend(DEP_D[FMT])
      DST_NONCOPY.extend(DST_D[FMT])

  # path variables
  def_fmt_vars("J2", "j2", ".j2", "")
  def_fmt_vars("HTML_J2", "html.j2", ".j2", "") # for sitenav - subset of *.j2 files that are *.html.j2
  for fmt in SRC_FORMATS:
    def_fmt_vars(fmt, fmt.lower(), "."+fmt.lower(), ".html")
  del fmt

  SRC_SPEC = [ pj(SRC, "site.json") ]
  SRC_COPY = filterout(IOV_ALL + SRC_SPEC + SRC_NONCOPY, SRC_ALL)
  DST_COPY = list(map(dst_SRC, SRC_COPY))
  DST_ENG = sorted(map(dst_ENG, list_files(ENGSRC)))
  DST_ENG_CSS = list(filter(lambda x: x.endswith(".css"), DST_ENG))
  DST_ENG_COPY = filterout(DST_ENG_CSS, DST_ENG)
  DST_THM = sorted(map(dst_THM, list_files(THMSRC)))
  DST_ALL = DST_NONCOPY + DST_COPY + DST_ENG + DST_THM

  return {k:v for k,v in locals().items() if not callable(v)} | {
    "THEME": THEME, "SRC": SRC, "GEN": GEN, "DST": DST,
  }

def wipe():
  # This is implemented outside of ninja rather than inside as a "phony target"
  # because targets are meant to be additive not subtractive. Implementing
  # subtractive "clean" targets in build systems that cannot distinguish
  # between additive vs subtractive targets (i.e. most if not all of them),
  # causes problems when running targets in parallel.

  global SRC, GEN, DST
  import shutil

  if not os.path.isdir(SRC):
    raise ValueError("SRC not a directory: %s" % SRC)

  if os.path.exists(GEN):
    shutil.rmtree(GEN)
  if os.path.exists(DST):
    for e in os.scandir(DST):
      if e.is_dir(follow_symlinks=False):
        shutil.rmtree(e.path)
      elif e.name not in (".git", ".nojekyll"): # keep certain files to help with publishing
        os.remove(e.path)

def main(*args):
  global SRC, GEN, DST

  if not os.path.isdir(SRC):
    raise ValueError("SRC not a directory: %s" % SRC)

  CFG = pj(GEN, "build.ninja.json")
  OUT = pj(GEN, "build.ninja")
  regen = True
  ninja = True
  wipe_ = False

  args = list(args)
  arg1 = args[0] if len(args) > 0 else None
  if arg1 == "wipe":
    wipe_ = True
    args.pop(0)
    if not args:
      regen = False
      ninja = False
  elif arg1 == "noregen":
    regen = False
    args.pop(0)
  elif arg1 == "noninja":
    ninja = False
    args.pop(0)

  if wipe_:
    wipe()

  if regen:
    # TODO: inputs (listfiles(), site.json, etc) are same then don't write
    # cost is trivial for small projects, so no need to optimise yet
    config = mk_config()
    BIN = config["BIN"]

    os.makedirs(os.path.dirname(CFG), exist_ok=True)
    with open(CFG, "w") as fp:
      json.dump(config, fp, indent=2)

    subprocess.run([
      pj(BIN, "j2-env.py"),
      pj(BIN, "build.ninja.j2"),
      CFG,
      OUT,
      pj(GEN, "build.ninja.d"),
    ], check=True)

  if ninja:
    return subprocess.run([
      "ninja", "-f", OUT
    ] + args).returncode

  return 0

if __name__ == "__main__":
  sys.exit(main(*sys.argv[1:]))
